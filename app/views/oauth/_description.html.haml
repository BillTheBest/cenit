:ruby
  begin
    cenit_oauth_scope = ::Cenit::OauthScope.new(scope).access_by_ids
    methods = Hash.new { |h, k| h[k] = [] }
    cenit_oauth_scope.each_criteria do |method, criteria|
      methods[method] = Setup::DataType.where(criteria)
    end
    basic = Hash.new
    if !cenit_oauth_scope.openid_set.empty?
      basic['openid']= cenit_oauth_scope.openid_set.to_a
      basic['openid'].map! do |d|
        case d
        when :email
          I18n.t('admin.oauth.openid.email')
        when :profile
          I18n.t('admin.oauth.openid.profile')
        when :address
          I18n.t('admin.oauth.openid.address')
        when :phone
          I18n.t('admin.oauth.openid.phone')
        else
          d
        end
      end
      basic['openid'].delete_if { |a| a == :openid }
    end
    if !cenit_oauth_scope.super_methods_set.empty?
      basic['super_methods_set']= cenit_oauth_scope.super_methods_set.to_a
      basic['super_methods_set'].map! do |d|
        case d
        when :post
          I18n.t('admin.oauth.super_methods.post')
        when :get
          I18n.t('admin.oauth.super_methods.get')
        when :put
          I18n.t('admin.oauth.super_methods.put')
        when :delete
          I18n.t('admin.oauth.super_methods.delete')
        else
          d
        end
      end
    end
    if cenit_oauth_scope.auth?
      basic['auth']= true
    end
    if cenit_oauth_scope.offline_access?
      basic['offline_access']= true
    end
    basic = basic.merge(methods)
    html = '<ul class="scope-description">'
    basic.each do |key, value|
      case key
      when 'openid'
        value = value.join(',')
        html+= "<li>#{value}</li>"
      when 'super_methods_set'
        value = value.join(',')
        html+= "<li>#{value}</li>"
      else
        if value == true
          case key
          when 'auth'
            auth_description = t('admin.oauth.auth_desc')
            key = I18n.t('admin.oauth.auth')+'<a href="#" data-toggle="tooltip" title="'+ auth_description+'"><i class="fa fa-info-circle" aria-hidden="true"></i></a>'
          when 'offline_access'
           offline_access_description = t('admin.oauth.offline_access_desc')
            key = I18n.t('admin.oauth.offline_access')+'<a href="#" data-toggle="tooltip" title="'+ offline_access_description+'"><i class="fa fa-info-circle" aria-hidden="true"></i></a>'
          else
            key
          end
          html+= "<li>#{key}</li>"
        else
          next unless (count = value.count) > 0
          max_data_type_to_show = 3
          config = RailsAdmin.config(::Setup::DataType)
          am = config.abstract_model
          if count > max_data_type_to_show
            i = 0
            first_links = []
            value.each do |dt|
              if (i < max_data_type_to_show)
                label = dt.send(config.object_label_method)
                link = link_to(label, rails_admin.show_path(model_name: ::Setup::DataType.to_s.underscore.gsub('/', '~'), id: dt.id),target: '_blank')
                first_links.push(link)
                i+=1
              else
                break
              end

            end
            first_links = first_links.to_sentence(options = { last_word_connector: ', ' })

            message = "<span>Showing data types for #{key} method</span>"
            filter_token = Cenit::Token.create(data: { criteria: value.selector, message: message }, token_span: 1.hours)
            link_more = link_to("more", rails_admin.index_path(model_name: ::Setup::DataType.to_s.underscore.gsub('/', '~'), filter_token: filter_token.token), target: '_blank' )
            links = "#{first_links} and #{count - max_data_type_to_show} #{link_more}"
          else
            links = value.collect do |dt|
              label = dt.send(config.object_label_method)
              link_to(label, rails_admin.show_path(model_name: ::Setup::DataType.to_s.underscore.gsub('/', '~'), id: dt.id),target: '_blank')
            end.to_sentence
          end
          case key
          when :get
            key =  I18n.t('admin.oauth.access.get')
          when :post
            key = I18n.t('admin.oauth.access.post')
          when :put
            key = I18n.t('admin.oauth.access.put')
          when :delete
            key = I18n.t('admin.oauth.access.delete')
          else
            key
          end
          html+= "<li>#{key}: <span>#{links}</span></li>"
        end
      end
    end
    html += "</ul>"
    html.html_safe
  rescue Exception => ex
    "ERROR: #{ex.message}"
  end
= html.html_safe